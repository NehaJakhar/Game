# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tBfHbJUsqi6VDw2mZhygMBKI8ohW9im5
"""

#pip install streamlit openai langchain

import streamlit as st
from langchain.llms import OpenAI
import random

st.title('"✍️"  AI Generated Quiz Application')

openai_api_key = st.sidebar.text_input('Insert OpenAI API Key Here: ')


def generate_quiz(topic, num_questions):
    llm = OpenAI(temperature=0.7, openai_api_key=openai_api_key)

    quiz = []
    for i in range(num_questions):
        # Construct question prompt
        question_prompt = f'Q{i + 1}: Generate a quiz question on {topic} with medium difficulty.'
        question = llm(question_prompt)

        # Construct correct answer prompt based on the generated question
        correct_answer_prompt = f'Generate the correct answer for the question: {question}'
        correct_answer = llm(correct_answer_prompt)

        # Construct incorrect answers prompts based on the generated question
        incorrect_answers_prompts = [
            f'Generate an incorrect option for the question: {question}' for _ in range(3)
        ]
        incorrect_answers = [llm(prompt) for prompt in incorrect_answers_prompts]

        # Shuffle the correct and incorrect answers
        all_options = [correct_answer] + incorrect_answers
        random.shuffle(all_options)

        quiz.append({'question': question, 'answers': all_options, 'correct_answer': correct_answer})

    return quiz


def score_quiz(quiz, user_responses):
    # Calculate the user's score based on selected options and correct answers
    score = 0
    for i in range(len(quiz)):
        if user_responses[i] == quiz[i]['correct_answer']:
            score += 1
    return score

user_responses = []  # Initialize user_responses list

with st.form('quiz_form'):
    topic = st.text_input('Enter quiz topic:', 'Python')  # Default topic is Programming
    num_questions = st.slider('Number of questions:', 1, 10, 5)  # Slider for selecting the number of questions
    submitted = st.form_submit_button('Start Quiz')

    if not openai_api_key.startswith('sk-'):
        st.warning('Please enter your OpenAI API key!', icon='😊')
    if submitted and openai_api_key.startswith('sk-'):
        quiz = generate_quiz(topic, num_questions)


        for q in quiz:
            st.subheader(q['question'])
            selected_option = st.radio('Select an answer:', q['answers'])
            user_responses.append(selected_option)

        if len(quiz) == num_questions:
          submitted = st.form_submit_button('Submit Quiz')
          # Check if the quiz has been submitted
          if submitted:
            # Display the user's score after submitting the quiz
            user_responses = [selected_option for i in range(num_questions)]
            user_score = score_quiz(quiz, user_responses)
            st.success(f'Your Score: {user_score}/{num_questions}')
            print(f'Your Score: {user_score}/{num_questions}')

        # Display the correct answers after submission
        #st.info(f'Correct Answers: {[q["correct_answer"] for q in quiz]}')

        # Display the correct answers with a newline for each question

        # Assuming 'quiz' is a list of dictionaries representing the quiz questions
        #correct_answers = [q["correct_answer"] for q in quiz]

# Create a string with newline-separated correct answers
#correct_answers_str = '\n'.join(correct_answers)

# Display the correct answers using Streamlit's info message
#st.info(f'Correct Answers:\n{correct_answers_str}')



"""### ***ADVERTISEMENTS***



> AD 1


> AD 2

> AD 3




>




> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

> ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







"""